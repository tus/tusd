// If this file gets changed, you must recompile the generate package in pkg/proto.
// To do this, install the Go protobuf toolchain as mentioned in
// https://grpc.io/docs/languages/go/quickstart/#prerequisites.
// Then use following command from the repository's root to recompile it with gRPC support:
//   protoc --go-grpc_out=./pkg/ --go_out=./pkg/ ./pkg/hooks/grpc/proto/hook.proto
// In addition, it may be necessary to update the protobuf or gRPC dependencies as well.

syntax = "proto3";
package proto;

option go_package = "hooks/grpc/proto";

// HookRequest contains the information about the hook type, the involved upload,
// and causing HTTP request.
message HookRequest {
	// Type is the name of the hook.
	string type = 1;
	
	// Event contains the involved upload and causing HTTP request.
	Event event = 2;
}

// Event represents an event from tusd which can be handled by the application.
message Event {
	// Upload contains information about the upload that caused this hook
	// to be fired.
	FileInfo upload = 1;

	// HTTPRequest contains details about the HTTP request that reached
	// tusd.
	HTTPRequest httpRequest = 2;

	// Only use by pre-access and pre-create (when Upload-Concat) hook
	AccessInfo access = 3;
}

// FileInfo contains information about a single upload resource.
message FileInfo {
	// ID is the unique identifier of the upload resource.
	string id = 1;
	// Total file size in bytes specified in the NewUpload call
	int64 size = 2; 
	// Indicates whether the total file size is deferred until later
	bool sizeIsDeferred = 3;
	// Offset in bytes (zero-based)
	int64 offset = 4;
	map<string, string> metaData = 5;
	// Indicates that this is a partial upload which will later be used to form
	// a final upload by concatenation. Partial uploads should not be processed
	// when they are finished since they are only incomplete chunks of files.
	bool isPartial = 6; 
	// Indicates that this is a final upload
	bool isFinal = 7; 
	// If the upload is a final one (see IsFinal) this will be a non-empty
	// ordered slice containing the ids of the uploads of which the final upload
	// will consist after concatenation.
	repeated string partialUploads = 8;
	// Storage contains information about where the data storage saves the upload,
	// for example a file path. The available values vary depending on what data
	// store is used. This map may also be nil.
	map <string, string> storage = 9;
}

// For pre-access and pre-create (when Upload-Concat) hook to protect access for instance
message AccessInfo {
	// read (Head/Get/Upload-Concat) or write (Patch/Delete)
	string mode = 1;

	// All files that will be access by http request
	// Use an array because of Upload-Concat that may target seeral files
	repeated FileInfo uploads = 2;
}

// FileInfoChanges collects changes the should be made to a FileInfo object. This
// can be done using the PreUploadCreateCallback to modify certain properties before
// an upload is created. Properties which should not be modified (e.g. Size or Offset)
// are intentionally left out here.
message FileInfoChanges {
	// If ID is not empty, it will be passed to the data store, allowing
	// hooks to influence the upload ID. Be aware that a data store is not required to
	// respect a pre-defined upload ID and might overwrite or modify it. However,
	// all data stores in the github.com/tus/tusd package do respect pre-defined IDs.
	string id = 1;

	// If MetaData is not nil, it replaces the entire user-defined meta data from
	// the upload creation request. You can add custom meta data fields this way
	// or ensure that only certain fields from the user-defined meta data are saved.
	// If you want to retain only specific entries from the user-defined meta data, you must
	// manually copy them into this MetaData field.
	// If you do not want to store any meta data, set this field to an empty map (`MetaData{}`).
	// If you want to keep the entire user-defined meta data, set this field to nil.
	map <string, string> metaData = 2;

	// If Storage is not nil, it is passed to the data store to allow for minor adjustments
	// to the upload storage (e.g. destination file name). The details are specific for each
	// data store and should be looked up in their respective documentation.
	// Please be aware that this behavior is currently not supported by any data store in
	// the github.com/tus/tusd package.
	map <string, string> storage = 3;
}


// HTTPRequest contains basic details of an incoming HTTP request.
message HTTPRequest {
	// Method is the HTTP method, e.g. POST or PATCH.
	string method = 1;
	// URI is the full HTTP request URI, e.g. /files/fooo.
	string uri = 2;
	// RemoteAddr contains the network address that sent the request.
	string remoteAddr = 3; 
	// Header contains all HTTP headers as present in the HTTP request.
	map <string, string> header = 4;
}

// HookResponse is the response after a hook is executed.
message HookResponse {
// HTTPResponse's fields can be filled to modify the HTTP response.
	// This is only possible for pre-create, pre-finish and post-receive hooks.
	// For other hooks this value is ignored.
	// If multiple hooks modify the HTTP response, a later hook may overwrite the
	// modified values from a previous hook (e.g. if multiple post-receive hooks
	// are executed).
	// Example usages: Send an error to the client if RejectUpload/StopUpload are
	// set in the pre-create/post-receive hook. Send more information to the client
	// in the pre-finish hook.
	HTTPResponse httpResponse = 1;

	// RejectUpload will cause the upload to be rejected and not be created during
	// POST request. This value is only respected for pre-create hooks. For other hooks,
	// it is ignored. Use the HTTPResponse field to send details about the rejection
	// to the client.
	bool rejectUpload = 2;

	// ChangeFileInfo can be set to change selected properties of an upload before
	// it has been created. See the handler.FileInfoChanges type for more details.
	// Changes are applied on a per-property basis, meaning that specifying just
	// one property leaves all others unchanged.
	// This value is only respected for pre-create hooks.
	FileInfoChanges changeFileInfo = 4;

	// StopUpload will cause the upload to be stopped during a PATCH request.
	// This value is only respected for post-receive hooks. For other hooks,
	// it is ignored. Use the HTTPResponse field to send details about the stop
	// to the client.
	bool stopUpload = 3;

	// In case of pre-access or pre-create (when Upload-Concat), reject access to upload
	// When true, http request will end with 403 status code by default, changeable with
	// HTTPResponse override
	bool rejectAccess = 5;
}

// HTTPResponse contains basic details of an outgoing HTTP response.
message HTTPResponse {
	// StatusCode is status code, e.g. 200 or 400.
	int64 statusCode = 1;
	// Header contains additional HTTP headers for the response.
	map <string, string> header = 2;
	// Body is the response body.
	string body = 3;
}

// The hook service definition.
service HookHandler {
	// InvokeHook is invoked for every hook that is executed. HookRequest contains the
	// corresponding information about the hook type, the involved upload, and
	// causing HTTP request.
	// The return value HookResponse allows to stop or reject an upload, as well as modifying
	// the HTTP response. See the documentation for HookResponse for more details.
	rpc InvokeHook (HookRequest) returns (HookResponse) {}
}
