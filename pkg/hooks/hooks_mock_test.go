// Code generated by MockGen. DO NOT EDIT.
// Source: hooks.go

// Package hooks is a generated GoMock package.
package hooks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHookHandler is a mock of HookHandler interface.
type MockHookHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHookHandlerMockRecorder
}

// MockHookHandlerMockRecorder is the mock recorder for MockHookHandler.
type MockHookHandlerMockRecorder struct {
	mock *MockHookHandler
}

// NewMockHookHandler creates a new mock instance.
func NewMockHookHandler(ctrl *gomock.Controller) *MockHookHandler {
	mock := &MockHookHandler{ctrl: ctrl}
	mock.recorder = &MockHookHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookHandler) EXPECT() *MockHookHandlerMockRecorder {
	return m.recorder
}

// InvokeHook mocks base method.
func (m *MockHookHandler) InvokeHook(req HookRequest) (HookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeHook", req)
	ret0, _ := ret[0].(HookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeHook indicates an expected call of InvokeHook.
func (mr *MockHookHandlerMockRecorder) InvokeHook(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeHook", reflect.TypeOf((*MockHookHandler)(nil).InvokeHook), req)
}

// Setup mocks base method.
func (m *MockHookHandler) Setup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockHookHandlerMockRecorder) Setup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockHookHandler)(nil).Setup))
}
